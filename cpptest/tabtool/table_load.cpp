//THIS FILE IS GENERATED BY tabtool, DO NOT EDIT IT!
//GENERATE TIME [2018/1/19 15:50:54]
#include <iostream>

#include "td_color.hpp"
game_data::td_color the_td_color;
template<> ::game_data::td_color const& GET_TABLE<::game_data::td_color>() {
	return the_td_color;
}
#include "td_head.hpp"
game_data::td_head the_td_head;
template<> ::game_data::td_head const& GET_TABLE<::game_data::td_head>() {
	return the_td_head;
}
#include "td_test.hpp"
game_data::td_test the_td_test;
template<> ::game_data::td_test const& GET_TABLE<::game_data::td_test>() {
	return the_td_test;
}

namespace game_data {
bool load_all_data() {
	if(!the_td_color.Load()) { std::cerr << "load td_color failed !!!" << std::endl; return false; }
	if(!the_td_head.Load()) { std::cerr << "load td_head failed !!!" << std::endl; return false; }
	if(!the_td_test.Load()) { std::cerr << "load td_test failed !!!" << std::endl; return false; }
	//relate code
	{
		for(auto p1 = the_td_head.RawMap().begin(); p1 != the_td_head.RawMap().end(); ++p1) {
			auto& v1 = (td_head_item&)p1->second;
			auto const& k1 = v1.head_id;
			for(auto p2 = the_td_color.RawMap().begin(); p2 != the_td_color.RawMap().end(); ++p2) {
				auto const& v2 = p2->second;
				auto const& k2 = v2.color_id;
				if(k1 == k2) {
					v1.__relate__td_color_items.push_back(&v2);
				}
			}
		}
	}
	{
		for(auto p1 = the_td_test.RawMap().begin(); p1 != the_td_test.RawMap().end(); ++p1) {
			auto& v1 = (td_test_item&)p1->second;
			auto const& k1 = v1.head_id;
			for(auto p2 = the_td_head.RawMap().begin(); p2 != the_td_head.RawMap().end(); ++p2) {
				auto const& v2 = p2->second;
				auto const& k2 = v2.head_type;
				if(k1 == k2) {
					v1.__relate__td_head_items.push_back(&v2);
				}
			}
		}
	}
	return true;
}
}
